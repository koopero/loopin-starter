# written by horten-persist-file at 2017-09-26T06:31:14-07:00
loopin:
  native:
    pid: 85069
  window:
    fullscreen: false
    height: 720
    width: 1280
    x: 6
    'y': 44
  image:
    example_earth:
      error: null
      file: /Volumes/hdd/koop/loopin/loopin-starter/image/example_earth.jpg
      height: 500
      loaded: true
      width: 1000
    example_jupiter:
      error: null
      file: /Volumes/hdd/koop/loopin/loopin-starter/image/example_jupiter.jpg
      height: 500
      loaded: true
      width: 1000
    example_moon:
      error: null
      file: /Volumes/hdd/koop/loopin/loopin-starter/image/example_moon.jpg
      height: 500
      loaded: true
      width: 1000
    example_planet:
      error: null
      file: /Volumes/hdd/koop/loopin/loopin-starter/image/example_planet.jpg
      height: 720
      loaded: true
      width: 1280
  shader:
    example_planet:
      vert:
        data: "#version 150\nuniform mat4 modelViewProjectionMatrix;\n\nin vec4 position;\nin vec2 texcoord;\nin vec4 color;\nin vec4 normal;\n\nout vec2 srcCoord;\nout vec3 lightNormal;\n\nuniform float clockTime;\nuniform float lightPitch = 90.0;\n\n/*\n  There's lots of copy pasta in GLSL.\n  This was ganked from https://gist.github.com/yiwenl/3f804e80d0930e34a0b33359259b556c\n*/\nvec2 rotate(vec2 v, float a) {\n\tfloat s = sin(a);\n\tfloat c = cos(a);\n\tmat2 m = mat2(c, -s, s, c);\n\treturn m * v;\n}\n\nconst float PI = 3.1415;\nuniform float planetSpeed = 1.0;\n\nvoid main()\n{\n  srcCoord = texcoord.xy;\n\n  vec4 pos = position;\n  gl_Position = modelViewProjectionMatrix * pos;\n\n\t// Calculate axial tilt\n\tlightNormal = normal.xyz;\n  float phase = clockTime;\n  phase /= 60;\n\tphase /= 365;\n  phase = fract( phase );\n\n\tlightNormal.xy = rotate( lightNormal.xy,\n\t\t( lightPitch + cos( phase * PI * 2.0 ) * 23 )\n\t\t/ 180.0 * PI\n\t);\n\n}\n"
        file: /Volumes/hdd/koop/loopin/loopin-starter/shader/example_planet.vert
      frag:
        data: |
          #version 150

          in vec2 srcCoord;
          out vec4 outputColour;

          // Custom input from example_planet.vert
          in vec3 lightNormal;

          // Clock uniforms supplied by ofxLoopin
          uniform float clockTime;
          uniform float clockDelta;

          // Custom uniforms unique to this shader.
          uniform sampler2D srcSampler;
          uniform sampler2D lightmapSampler;
          uniform float planetBlurAmount = 1.0;
          uniform float lightGamma = 0.5;
          uniform float lightGain = 1.0;
          uniform float lightContrast = 1.0;


          void main()
          {
            vec2 coord = srcCoord;

            // Compute the phase of the planet and add it to coord.x
            float phase = clockTime;
            phase /= -60;
            phase = fract( phase );
            coord.x += phase;

            // Create motion blur by sampling srcSampler many times
            // and averaging results.
            int blurSamples = 32;
            vec4 colour = vec4(0,0,0,0);
            float blurMix = 1.0/float(blurSamples);
            float blurXStep = clockDelta * planetBlurAmount / 60.0 * blurMix;
            for ( int i = 0; i < blurSamples; i ++ ) {
              colour += texture(srcSampler, coord ) * blurMix;
              coord.x += blurXStep;
            }

            // Get lightmap coordinate from normal
            vec2 light = -lightNormal.xy;
            light.x += 1;
            light.x *= 0.5;
            light.y = 0;

            // Get lightmap sample and apply lightContrast
            colour.rgb *= mix(
              vec3(1,1,1),
              texture(lightmapSampler, light ).rgb,
              lightContrast
            );

            // Apply lightGamma
            colour.r = pow( colour.r, lightGamma );
            colour.g = pow( colour.g, lightGamma );
            colour.b = pow( colour.b, lightGamma );

            // Apply lightGain
            colour.rgb *= lightGain;

            outputColour = colour;
          }
        file: /Volumes/hdd/koop/loopin/loopin-starter/shader/example_planet.frag
      loaded: true
    solidRGBA:
      frag:
        data: |
          #version 150

          uniform float red;
          uniform float green;
          uniform float blue;
          uniform float alpha;

          out vec4 OUT;

          void main()
          {
            OUT = vec4( red, green, blue, alpha );
          }
        file: >-
          /Volumes/hdd/koop/loopin/loopin-native/build/ofxLoopin-0.8.0-beta-osx/bin/data/ofxLoopin/shader/solidRGBA.frag
      loaded: true
  pixels:
    example_lightmap:
      data: 2659a8 00118d 00276b 001459 b79170 ccbfbd e3e8ff ffffff
      buffer: null
      channels: rgb
      format: hex
      height: 0
      input: change
      output: none
      shader: solidRGBA
      width: 0
  input:
    x: 0.8718750476837158
    'y': 0.9861111640930176
  camera:
    example_camera:
      distance: 1.087696335078534
      fov: 30
      zoom: -0.36649214659686
      yaw: -3.7696335078535412
      pitch: -49.37041884816754
      roll: -10.236910994764443
  render:
    example_planet:
      float:
        planetBlurAmount: 1.966432286331707
        lightContrast: 1.124776853019379
        lightGamma: 0.9388743455497374
        lightGain: 1.2574764946136348
        lightPitch: -0.23560209424078948
      texture:
        lightmap:
          buffer: example_lightmap
          filter: linear
        src:
          buffer: example_earth
      clock:
        speed: 12.23795405645752
  show:
    filter: linear
    buffer: example_planet
  mesh:
    example_sphere:
      sphere:
        rows: 39.78795811518324
        cols: 39.72643979057591
  save:
    example_planet:
      dest: >-
        /Volumes/hdd/koop/loopin/loopin-starter/tmp/012561.example_planet.B.3n26.jpg
      format: jpg
      frame: 12562
      quality: best
  osd:
    enabled: true
    text: ''
logic:
  snapshot:
    extension: .jpg
    buffer: example_planet
  recorder:
    start: !<tag:yaml.org,2002:js/undefined> ''
    rate: 60
    count: 60.137443805326
    buffer: example_planet
